// source: proto/cpu_usage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.cpu_usage.v1.CpuUsageRequest', null, global);
goog.exportSymbol('proto.cpu_usage.v1.CpuUsageResponse', null, global);
goog.exportSymbol('proto.cpu_usage.v1.CpuUsageStat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpu_usage.v1.CpuUsageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpu_usage.v1.CpuUsageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpu_usage.v1.CpuUsageRequest.displayName = 'proto.cpu_usage.v1.CpuUsageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpu_usage.v1.CpuUsageStat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpu_usage.v1.CpuUsageStat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpu_usage.v1.CpuUsageStat.displayName = 'proto.cpu_usage.v1.CpuUsageStat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpu_usage.v1.CpuUsageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpu_usage.v1.CpuUsageResponse.repeatedFields_, null);
};
goog.inherits(proto.cpu_usage.v1.CpuUsageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpu_usage.v1.CpuUsageResponse.displayName = 'proto.cpu_usage.v1.CpuUsageResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpu_usage.v1.CpuUsageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cpu_usage.v1.CpuUsageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpu_usage.v1.CpuUsageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpu_usage.v1.CpuUsageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    waitDurationMs: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpu_usage.v1.CpuUsageRequest}
 */
proto.cpu_usage.v1.CpuUsageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpu_usage.v1.CpuUsageRequest;
  return proto.cpu_usage.v1.CpuUsageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpu_usage.v1.CpuUsageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpu_usage.v1.CpuUsageRequest}
 */
proto.cpu_usage.v1.CpuUsageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWaitDurationMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpu_usage.v1.CpuUsageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpu_usage.v1.CpuUsageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpu_usage.v1.CpuUsageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpu_usage.v1.CpuUsageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaitDurationMs();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 wait_duration_ms = 1;
 * @return {number}
 */
proto.cpu_usage.v1.CpuUsageRequest.prototype.getWaitDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpu_usage.v1.CpuUsageRequest} returns this
 */
proto.cpu_usage.v1.CpuUsageRequest.prototype.setWaitDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpu_usage.v1.CpuUsageStat.prototype.toObject = function(opt_includeInstance) {
  return proto.cpu_usage.v1.CpuUsageStat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpu_usage.v1.CpuUsageStat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpu_usage.v1.CpuUsageStat.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    usage: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpu_usage.v1.CpuUsageStat}
 */
proto.cpu_usage.v1.CpuUsageStat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpu_usage.v1.CpuUsageStat;
  return proto.cpu_usage.v1.CpuUsageStat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpu_usage.v1.CpuUsageStat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpu_usage.v1.CpuUsageStat}
 */
proto.cpu_usage.v1.CpuUsageStat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUsage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpu_usage.v1.CpuUsageStat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpu_usage.v1.CpuUsageStat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpu_usage.v1.CpuUsageStat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpu_usage.v1.CpuUsageStat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUsage();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional uint32 cpuid = 1;
 * @return {number}
 */
proto.cpu_usage.v1.CpuUsageStat.prototype.getCpuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpu_usage.v1.CpuUsageStat} returns this
 */
proto.cpu_usage.v1.CpuUsageStat.prototype.setCpuid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float usage = 2;
 * @return {number}
 */
proto.cpu_usage.v1.CpuUsageStat.prototype.getUsage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cpu_usage.v1.CpuUsageStat} returns this
 */
proto.cpu_usage.v1.CpuUsageStat.prototype.setUsage = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpu_usage.v1.CpuUsageResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpu_usage.v1.CpuUsageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cpu_usage.v1.CpuUsageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpu_usage.v1.CpuUsageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpu_usage.v1.CpuUsageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statsList: jspb.Message.toObjectList(msg.getStatsList(),
    proto.cpu_usage.v1.CpuUsageStat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpu_usage.v1.CpuUsageResponse}
 */
proto.cpu_usage.v1.CpuUsageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpu_usage.v1.CpuUsageResponse;
  return proto.cpu_usage.v1.CpuUsageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpu_usage.v1.CpuUsageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpu_usage.v1.CpuUsageResponse}
 */
proto.cpu_usage.v1.CpuUsageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpu_usage.v1.CpuUsageStat;
      reader.readMessage(value,proto.cpu_usage.v1.CpuUsageStat.deserializeBinaryFromReader);
      msg.addStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpu_usage.v1.CpuUsageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpu_usage.v1.CpuUsageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpu_usage.v1.CpuUsageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpu_usage.v1.CpuUsageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cpu_usage.v1.CpuUsageStat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CpuUsageStat stats = 1;
 * @return {!Array<!proto.cpu_usage.v1.CpuUsageStat>}
 */
proto.cpu_usage.v1.CpuUsageResponse.prototype.getStatsList = function() {
  return /** @type{!Array<!proto.cpu_usage.v1.CpuUsageStat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpu_usage.v1.CpuUsageStat, 1));
};


/**
 * @param {!Array<!proto.cpu_usage.v1.CpuUsageStat>} value
 * @return {!proto.cpu_usage.v1.CpuUsageResponse} returns this
*/
proto.cpu_usage.v1.CpuUsageResponse.prototype.setStatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cpu_usage.v1.CpuUsageStat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpu_usage.v1.CpuUsageStat}
 */
proto.cpu_usage.v1.CpuUsageResponse.prototype.addStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cpu_usage.v1.CpuUsageStat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpu_usage.v1.CpuUsageResponse} returns this
 */
proto.cpu_usage.v1.CpuUsageResponse.prototype.clearStatsList = function() {
  return this.setStatsList([]);
};


goog.object.extend(exports, proto.cpu_usage.v1);
